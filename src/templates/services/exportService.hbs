{{>header}}

{{#equals @root.httpClient 'angular'}}
{{#if @root.exportClient}}
import { Injectable } from '@angular/core';
import type { Observable } from 'rxjs';
{{else}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
{{/if}}

{{/equals}}
{{#if imports}}
import type {
{{#each imports}}
 {{{this}}},
{{/each}}
<<<<<<< HEAD:src/templates/exportService.hbs

=======
} from '../models';
>>>>>>> 131d3f5 (PE-2152 - export index files):src/templates/services/exportService.hbs
{{/if}}
{{#notEquals @root.httpClient 'angular'}}
import type { CancelablePromise } from '../core/CancelablePromise';
{{/notEquals}}
{{#if @root.exportClient}}
<<<<<<< HEAD
<<<<<<< HEAD:src/templates/exportService.hbs
{{#equals @root.httpClient 'angular'}}
import { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{/equals}}
{{else}}
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
=======
import { BaseHttpRequest } from '../core';
=======
import type { ApiResult, BaseHttpRequest, OpenAPIConfig } from '../core';
>>>>>>> 1ee6314 (PE-2229 - rename OpenApi properties, remove config from http client, add config to request)
{{else}}
import type { ApiResult } from '../core';
import {
    request as __request,
{{#if @root.useVersion}}
    OpenAPI,
>>>>>>> 131d3f5 (PE-2152 - export index files):src/templates/services/exportService.hbs
{{/if}}
} from '../core';
{{/if}}

<<<<<<< HEAD
{{#equals @root.httpClient 'angular'}}
@Injectable({
  providedIn: 'root',
})
{{/equals}}
export class {{{name}}}{{{@root.postfix}}} {
	{{#if @root.exportClient}}

	constructor(public readonly httpRequest: BaseHttpRequest) {}
	{{else}}
	{{#equals @root.httpClient 'angular'}}

	constructor(public readonly http: HttpClient) {}
	{{/equals}}
	{{/if}}
=======
export class {{{name}}} {
    {{#if @root.exportClient}}
    private readonly httpRequest: BaseHttpRequest;
    private readonly openApiConfig: OpenAPIConfig;

    constructor(httpRequest: BaseHttpRequest, openApiConfig: OpenAPIConfig) {
        this.httpRequest = httpRequest;
        this.openApiConfig = openApiConfig;
    }
    {{/if}}

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#if @root.exportClient}}* @param [config] the optional OpenAPI config to use{{/if}}
    {{#each results}}
     * @returns {{{type}}} {{{description}}}
    {{/each}}
    * @throws ApiError
    */
    public{{#unless @root.exportClient}} static{{/unless}} async {{{name}}}({{>parameters}}): Promise<ApiResult<{{>result}}>> {
        return {{#if @root.exportClient}}this.httpRequest.request{{else}}__request{{/if}}({
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersCookie}}
            cookies: {
                {{#each parametersCookie}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            body: {{{parametersBody.name}}},
            {{#if parametersBody.mediaType}}
            mediaType: '{{{parametersBody.mediaType}}}',
            {{/if}}
            {{/if}}
            {{#if responseHeader}}
            responseHeader: '{{{responseHeader}}}',
            {{/if}}
            {{#if errors}}
            errors: {
                {{#each errors}}
                {{{code}}}: `{{{description}}}`,
                {{/each}}
            },
            {{/if}}
        }{{#if @root.exportClient}}, this.openApiConfig, config{{/if}});
    }
>>>>>>> 1ee6314 (PE-2229 - rename OpenApi properties, remove config from http client, add config to request)

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */
	{{#if @root.exportClient}}
	{{#equals @root.httpClient 'angular'}}
	public {{{name}}}({{>parameters}}): Observable<{{>result}}> {
		return this.httpRequest.request({
	{{else}}
	public {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return this.httpRequest.request({
	{{/equals}}
	{{else}}
	{{#equals @root.httpClient 'angular'}}
	public {{{name}}}({{>parameters}}): Observable<{{>result}}> {
		return __request(OpenAPI, this.http, {
	{{else}}
	public static {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return __request(OpenAPI, {
	{{/equals}}
	{{/if}}
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if errors}}
			errors: {
				{{#each errors}}
				{{{code}}}: `{{{escapeDescription description}}}`,
				{{/each}}
			},
			{{/if}}
		});
	}

	{{/each}}
}
